<document>
    <properties>
      <author email="leonid.vysochyn@gmail.com">Leonid Vysochyn</author>
      <title>Using Expressions</title>
    </properties>
    <body>
        <section id="overview" name="Overview">
            <p>
            Very often it is required to modify bean properties before placing them into excel cell.
            For example you may want to scale or summarize some properties without using Excel formulas.
            jXLS supports expression language syntax to perform achieve this.
            </p>
        </section>
        <section id="expressionlanguage" name="Expression Language">
            <p>
            Using expressions with your bean or collection properties is very easy.
            Instead of any bean property you may put an expression.
                For example if we want to calculate total chief's payment in a Department we can use an expression:
            </p>
            <source>
                ${department.chief.payment * ( department.chief.bonus + 1 )}
            </source>
            <p>
                Applying expressions to every collection item is the same easy
            </p>
            <source>
                ${department.staff.payment * ( department.staff.bonus + 1 )}
            </source>
            <p>In every Excel cell you may use as many expressions as you want. For example</p>
            <source>
    Payment:${department.staff.payment/10}, Total:${department.staff.payment * ( department.staff.bonus + 1 )}
            </source>
        </section>
        <section id="fullJEXLSupport" name="JEXL Expressions Support">
            <p>
                jXLS uses <a href="http://jakarta.apache.org/commons/jexl">Jakarta Commons JEXL</a> library to evaluate expressions.
                It means that besides standard arithmetic and boolean expressions you may also use arrays, collection references,
                perform object method calls and do many other things supported by JEXL.
                See reference on <a href="http://jakarta.apache.org/commons/jexl/reference/syntax.html">JEXL Syntax</a> for more details.
                Still there are a couple of limitations imposed by jXLS on JEXL that needs to be mentioned.</p>
                <ul>
                    <li>Use of the JEXL built-in "size" function does not produce the expected result because JXLS handles collections in a special way</li>
                    <li>Functions on collections cannot be called because they are hidden by the way that JXLS handles collections</li>
                </ul>
            <p>
                Also due to a special jXLS inner collections handling mechanism JEXL expressions for inner collections should be
                explicitly enabled. See the next section for details about accessing inner collections with JEXL.
            </p>
            <p>To give you an example of some JEXL expressions let's
                assume the following code
            </p>
            <source>
                ...
        Map beans = new HashMap();
        SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        beans.put("dateFormat", dateFormat);
        SampleBean obj = new SampleBean();
        beans.put("obj", obj);
        XLSTransformer transformer = new XLSTransformer();
        HSSFWorkbook resultWorkbook = transformer.transformXLS(inputStream, beans);
                ...
            </source>
            <p>has been applied to the <a href="../samples/bean.html">Bean</a>.</p>
            <p>Next JEXL expressions can be put in XLS template and evaluated</p>
            <source>
                ${obj.name}
                ${"Hello, World"}
                ${obj.flag == true}
                ${obj.name == null}
                ${empty(obj.collection)}
                ${obj.name.size()}
                ${!empty(obj.collection) &amp;&amp; obj.id > 0}
                ${empty(obj.collection) || obj.id == 1}
                ${not empty(obj.collection)}
                ${obj.id &gt; 1}
                ${obj.id == 1}
                ${obj.id eq 1}
                ${obj.id % 2}
                ${obj.myArray[0]} and ${obj.myArray[1]}
                ${dateFormat.format(obj.date)}
                ${obj.printIt()}
                ${obj.getName()}
                ${obj.echo("Hello")}
            </source>
        </section>
        <section id="JEXLInnerCollectionsAccess" name="Using JEXL to access inner collections">
            <p>
                Direct JEXL access to the items of inner collections is disabled by default because
                jXLS has its own inner collections handling mechanism.
                If you need this feature you have to turn it on explicitly by using a special method in XLSTransformer: </p>
                <source>
                    XLSTransformer transformer = new XLSTransformer();
                    transformer.setJexlInnerCollectionsAccess( true );
                </source>
            <p>
                In this case built-in jXLS mechanism for handling inner collections will be disabled so JEXL expressions could be used
                to access inner collections in the following way: </p>
                <source>obj.collection.innerCollection.get(1)</source>
            <p> This expression would display the first item from all inner collections, each in a cell of its own.
                For example for an object graph that is structured like this... <a href="../samples/bean2.html">Sample Bean</a>
                and placed into the context using
            </p>
            <source>
            beans.put("obj", new Bean());
            </source>
           <p> ...the expression would populate 3 cells on 3 different rows...</p>
            <source>
            |1|
            |a|
            |i|
            </source>
            <note> When enabling JEXL to handle inner collections you will not longer be able to use
                   <a href="advancedcollections.html#innercollections">jXLS inner collections</a>.
                Instead you should use <a href="tags.html#foreach">jx:forEachTag</a> to iterate inner collections.
            </note>
        </section>
    </body>
</document>
