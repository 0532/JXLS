<document>
    <properties>
      <author email="leonid.vysochyn@gmail.com">Leonid Vysochyn</author>
      <title>Tags in XLS templates</title>
    </properties>
    <body>
        <section name="Introduction" id="introduction">
            <p>jXLS allows you to use predefined XML tags in your template to control XLS transformation behaviour.</p>
        </section>
        <section name="jx:forEach Tag" id="forEachTag">
            <title></title>
            <p>Typical usage of <code>&lt;jx:forEach></code> tag is as follows</p>
            <source>
                &lt;jx:forEach items="${departments}" var="department">
                    ${department.name} | ${department.chief}
                &lt;/jx:forEach>
            </source>
            <p>jx tags can be nested into each other without any problems. </p>
            <p>If you place opening and closing jx:forEach tags onto the same row jXLS will duplicate corresponding excel
                columns in the same way as it does with rows.
            </p>
            <note>Currently if you need to duplicate excel rows with jx:forEach tag you have to place jx:forEach opening
            and closing tag into separate excel rows. All other cells in these rows are ignored.</note>
            <p>See also <a href="../samples/tagsample.html">Basic Tags sample</a></p>
            <section id="forEachTagGrouping" name="Grouping data with jx:forEach tag">
                <p><code>jx:forEach</code> tag allows you to perform grouping of collection data by one of the underlying bean properties.
                This can be done with <code>groupBy</code> attribute which specifies which property should be used for grouping data.
                For example </p>
                <source>
                    &lt;jx:forEach items="${employees}" groupBy="age">
                    Age: ${group.item.age}
                    &lt;jx:forEach items="${group.items}" var="employee">
                    ${employee.name} | ${employee.payment} | ${employee.bonus}
                    &lt;/jx:forEach>
                    &lt;/jx:forEach>
                </source>
                <p>In this example we group <code>employees</code> by age. When encountered <code>groupBy</code> attribute
                jXLS performs grouping internally and places new bean named <code>group</code> into the context. This bean is rather simple -
                it contains two properties. The <code>item</code> property which is a bean from current processed group and the
                <code>items</code> property which represents the collection of all the beans from this group.</p>
                <p>As you can see in this example we first displaying some information about current group age using </p>
                <source>
                    Age: ${group.item.age}
                </source>
                <p>And after that we use inner <code>&lt;jx:forEach></code> tag to iterate and display all the group items</p>
                <source>
                    &lt;jx:forEach items="${group.items}" var="employee">
                    ${employee.name} | ${employee.payment} | ${employee.bonus}
                    &lt;/jx:forEach>
                </source>
                <p>In case of using <code>groupBy</code> attribute the <code>var</code> attribute of <code>jx:forEach</code>
                   tag is ignored.
                </p>
            </section>
        </section>
        <section id="ifTag" name="jx:if Tag">
            <p>Typical usage of <code>&lt;jx:if></code> tag is as follows</p>
            <source>
                    &lt;jx:if test="${department.chief.payment > 2000.0}">
                        Chief Name: ${department.chief.name}
                    &lt;/jx:if>
            </source>
            <p>jx:if tag can be used to exclude some columns from export based on some condition. If you
            place opening and closing <code>jx:if</code> tag into the same row jXLS will process or remove columns contained in
            tag body depending on test condition.</p>
            <p>See also <a href="../samples/tagsample.html">Basic Tags sample</a></p>
        </section>
        <section id="outlineTag" name="jx:outline Tag">
            <p><code>&lt;jx:outline></code> tag allows you to group particular set of rows. For example having</p>
            <source>
                    &lt;jx:outline>
                        //any rows can go here
                    &lt;/jx:outline>
            </source>
            <p>All excel rows from the body of jx:group tag will be grouped.</p>
            <p><code>&lt;jx:outline></code> tag has one optional boolean attribute <code>detail</code> indicating
            initial state of grouped rows - should they be displayed expanded or collapsed. Default value is <code>false</code>
                meaning grouped rows will be collapsed (or hidden).
            </p>
        </section>

    </body>
</document>
