<document>
    <properties>
      <author email="leonid.vysochyn@gmail.com">Leonid Vysochyn</author>
      <title>Tags in XLS templates</title>
    </properties>
    <body>
        <section name="Introduction" id="introduction">
            <p>jXLS allows you to use predefined XML tags in your template to control XLS transformation behaviour.</p>
        </section>
        <section name="jx:forEach Tag" id="forEachTag">
            <p>Typical usage of <code>&lt;jx:forEach></code> tag is as follows</p>
            <source>
                &lt;jx:forEach items="${departments}" var="department">
                    ${department.name} | ${department.chief}
                &lt;/jx:forEach>
            </source>
            <p>jx tags can be nested into each other without any problems. </p>
            <p>If you place opening and closing jx:forEach tags onto the same row jXLS will duplicate corresponding excel
                cells in this row by columns.
            </p>
            <note>Currently if you need to duplicate excel rows with jx:forEach tag you have to place jx:forEach opening
            and closing tag into separate excel rows. All other cells in these rows are ignored.</note>
            <p>See also <a href="../samples/tagsample.html">Basic Tags sample</a></p>
            <section id="forEachTagGrouping" name="Grouping data with jx:forEach tag">
                <p><code>jx:forEach</code> tag allows you to perform grouping of collection data by one of the underlying bean properties.
                This can be done with <code>groupBy</code> and <code>groupOrder</code> attributes which specify which property should be used for grouping data
                and how groups should be ordered.
                For example </p>
                <source>
                    &lt;jx:forEach items="${employees}" groupBy="age">
                    Age: ${group.item.age}
                    &lt;jx:forEach items="${group.items}" var="employee">
                    ${employee.name} | ${employee.payment} | ${employee.bonus}
                    &lt;/jx:forEach>
                    &lt;/jx:forEach>
                </source>
                <p>In this example we group <code>employees</code> by age. When encountered <code>groupBy</code> attribute
                jXLS performs grouping internally and places new bean named <code>group</code> into the context. This bean is rather simple -
                it contains two properties. The <code>item</code> property which is a bean from current processed group and the
                <code>items</code> property which represents the collection of all the beans from this group.</p>
                <p>As you can see in this example we first displaying some information about current group age using </p>
                <source>
                    Age: ${group.item.age}
                </source>
                <p>And after that we use inner <code>&lt;jx:forEach></code> tag to iterate and display all the group items</p>
                <source>
                    &lt;jx:forEach items="${group.items}" var="employee">
                    ${employee.name} | ${employee.payment} | ${employee.bonus}
                    &lt;/jx:forEach>
                </source>
                <p>
                    By default if there is no <code>groupOrder</code> attribute group order will be preserved "as is" so that groups will be
                    in the same order as they were found in the original <code>items</code> collection. If you need to sort groups in
                    ascending or descending order you can set <code>groupOrder</code> attribute to <code>asc</code> or <code>desc</code> value accordingly.
                </p>
                <p>In case of using <code>groupBy</code> attribute the <code>var</code> attribute of <code>jx:forEach</code>
                   tag is ignored.
                </p>
            </section>
            <section id="forEachTagSelect" name="Filtering collection items">
                <p>You can use 'select' attribute of jx:forEach tag to control which items get included in the loop. For example if we want to include only  employees
                with payments more than 2000 we can use next syntax</p>
                <source>
                    &lt;jx:forEach items="${employees}" var="employee" select="${employee.payment > 2000}">
                    ${employee.name} | ${employee.payment} | ${employee.bonus}
                    &lt;/jx:forEach>
                </source>
            </section>
            <section id="forEachTagVarStatus" name="varStatus attribute">
                <p>jx:forEach tag support varStatus attribute which defines a name of loop status object which will be passed into bean context for each iteration.
                The loop status object is an instance of LoopStatus class which has single 'index' property identifying the index of the current item in the collection being iterated</p>
                <source>
                    &lt;jx:forEach items="${employees}" var="employee" varStatus="status">
                    | ${status.index} | ${employee.name} | ${employee.payment} | ${employee.bonus}
                    &lt;/jx:forEach>
                </source>
            </section>
        </section>
        <section id="ifTag" name="jx:if Tag">
            <p>Typical usage of <code>&lt;jx:if></code> tag is as follows</p>
            <source>
                    &lt;jx:if test="${department.chief.payment > 2000.0}">
                        Chief Name: ${department.chief.name}
                    &lt;/jx:if>
            </source>
            <p>jx:if tag can be used to exclude some columns from export based on some condition. If you
            place opening and closing <code>jx:if</code> tag into the same row jXLS will process or remove columns contained in
            tag body depending on test condition.</p>
        </section>
        <section id="outlineTag" name="jx:outline Tag">
            <p><code>&lt;jx:outline></code> tag allows you to group particular set of rows. For example having</p>
            <source>
                    &lt;jx:outline>
                        //any rows can go here
                    &lt;/jx:outline>
            </source>
            <p>All excel rows from the body of jx:group tag will be grouped.</p>
            <p><code>&lt;jx:outline></code> tag has one optional boolean attribute <code>detail</code> indicating
            initial state of grouped rows - should they be displayed expanded or collapsed. Default value is <code>false</code>
                meaning grouped rows will be collapsed (or hidden).
            </p>
        </section>
        <section id="outTag" name="jx:out Tag">
            <p>jx:out tag looks like this</p>
            <source>
                &lt;jx:out expr="expression" />
            </source>
            <p>
                This tag can be used anywhere that an expression would be used normally and simply takes a JEXL expression as an attribute value.
            </p>
        </section>
        <section id="getMoreInformation" name="Getting more information">
            <p>A big source of samples of jx tags usage can be found in jxls-core module unit tests. Take a look at various templates to see how they are built.
            If you are stuck do not hesitate to write on jXLS forum or send a message to jXLS mailing list.</p>
        </section>
    </body>
</document>
