<document>
    <properties>
      <author email="leonid.vysochyn@gmail.com">Leonid Vysochyn</author>
      <title>jXLS Templates Notation</title>
    </properties>
    <body>
        <section id="introduction" name="Introduction">
            <p>This part describes object property access syntax that must be used in XLS template to be correctly processed by jXLS engine.</p>
            <p>Next sections assume that we have two dependent Java beans of type
                <a href="../samples/departmentbean.html">Department</a> and
                <a href="../samples/employeebean.html">Employee</a> which are passed to XLSTransformer in a code like this
            </p>
            <source>
                    Department department;
                    ... //initialization
                    Map beans = new HashMap();
                    beans.put("department", department);
                    XLSTransformer transformer = new XLSTransformer();
                    transformer.transformXLS(xlsTemplateFileName, beans, outputFileName);
            </source>
        </section>
        <section id="basicPropertyAccess" name="Basic Property Access">
            <p>To access simple bean property in Excel cell following notation should be used</p>
            <source>
					${department.name}
            </source>
            <p>jXLS engine will search for the bean under the key
                <code>department</code> in the current bean map and then will try to get the value of its
                <code>name</code> property and put it into the corresponding Excel cell.
            </p>
            <p>In the same way we can access more complex property. For example to output the name  of the chief of the department we can use </p>
            <source>
					${department.chief.name}
            </source>
            <p>Any object property graph depth is possible. For example, </p>
            <source>
        ${bean.bean1.bean2.bean3.bean4.bean5.bean6.bean7.bean8.bean9.beanX.property1}
            </source>
        </section>
        <section id="severalPropertiesInACell" name="Several Properties in a cell">
            <p>We can concatenate several properties in a cell. For example </p>
            <source>
					Employee: ${employee.name} - ${employee.age} years
            </source>
            <p>In this way we'll get an output like </p>
            <source>
                    Employee: John - 35 years
            </source>
        </section>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-7339856-1");
pageTracker._trackPageview();
} catch(err) {}</script>
    </body>
</document>
