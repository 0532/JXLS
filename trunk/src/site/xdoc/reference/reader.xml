<document>
    <properties>
      <author email="leonid.vysochyn@gmail.com">Leonid Vysochyn</author>
      <title>Reading XLS files</title>
    </properties>
	<body>
		<section id="overview" name="Overview">
			<p>jXLS provides <strong>jxls-reader</strong> module to read XLS files and populate Java beans
                with spreadsheet data.
            </p>
		</section>
		<section id="details" name="Usage Details">
			<p>To use jXLS to parse excel files and populate your Java objects with read data you have to construct XLSReader object first.
                The easiest way to do this is to use a special XML configuration file.
            We will use <a href="../xls/departmentdata.xls">departmentdata.xls</a> file with department data to demonstrate this method  </p>
            <section id="xmlReaderXMLConfigBased" name="Construction of XLSReader using XML config file">
                <p>   Mapping between spreadsheet cells and Java objects is configured in XML file. Mapping file structure is rather straightforward.
                Let's take a look at xml mapping file for 'Sheet1' of our <a href="../xls/departmentdata.xls">departmentdata.xls</a> sample file </p>
                <source>
                    &lt;?xml version="1.0" encoding="ISO-8859-1"?>
                    &lt;workbook>
                        &lt;worksheet name="Sheet1">
                            &lt;section startRow="0" endRow="6">
                                &lt;mapping cell="B1">department.name&lt;/mapping>
                                &lt;mapping cell="A4">department.chief.name&lt;/mapping>
                                &lt;mapping cell="B4">department.chief.age&lt;/mapping>
                                &lt;mapping cell="D4">department.chief.payment&lt;/mapping>
                                &lt;mapping row="3" col="4">department.chief.bonus&lt;/mapping>
                            &lt;/section>
                            &lt;loop startRow="7" endRow="7" items="department.staff" var="employee" varType="net.sf.jxls.reader.sample.Employee">
                                &lt;section startRow="7" endRow="7">
                                    &lt;mapping row="7" col="0">employee.name&lt;/mapping>
                                    &lt;mapping row="7" col="1">employee.age&lt;/mapping>
                                    &lt;mapping row="7" col="3">employee.payment&lt;/mapping>
                                    &lt;mapping row="7" col="4">employee.bonus&lt;/mapping>
                                &lt;/section>
                                &lt;loopbreakcondition>
                                    &lt;rowcheck offset="0">
                                        &lt;cellcheck offset="0">Employee Payment Totals:&lt;/cellcheck>
                                    &lt;/rowcheck>
                                &lt;/loopbreakcondition>
                            &lt;/loop>
                        &lt;/worksheet>
                    &lt;/workbook>
                </source>
                <p>As we can see the root element of xml file is <strong>workbook</strong> and it can contain any number of child <strong>worksheet</strong>
                    elements. <strong>worksheet</strong> tag should contain <strong>name</strong> attribute indicating the name of excel worksheet which it describes (Sheet1 in our case).
                </p>
                <p><strong>worksheet</strong> element can contain any number of <strong>section</strong> and <strong>loop</strong> child elements.</p>
                <p><strong>section</strong> element represents a simple block of spreadsheet cells. The first and the last rows of the block are
                specified with <strong>startRow</strong> and <strong>endRow</strong> attributes</p>
                <note> In the current version you have to specify sections for the whole excel sheet so that it is completely broken down into sections.
                It means that even if you are not going to read for example the first rows of the sheet you need to create an empty section (a section without mappings but with startRow/endRow attributes)
                    so that these rows are reflected in XML file. The unnecessary rows will be skipped and all other sections will be read as required.</note>
                <p>Mapping of XLS cells onto Java bean properties is defined using <strong>mapping</strong> tag which looks like following </p>
                <source>
                        &lt;mapping cell="B1">department.name&lt;/mapping>
                </source>
                <p>You also can use <strong>cell</strong> attribute to specify mapped cell and the body of the tag for a full property name
                to populate from this cell. By full property name we mean bean name concatenated with property name like department.name or department.chief.payment .
                Another option to specify mapped cell is to use cell row and column numbers (zero-based) </p>
                <source>
                    &lt;mapping row="3" col="4">department.chief.bonus&lt;/mapping>
                </source>
                <p>This defines mapping for E4 cell and maps it to department.chief.bonus property.</p>
                <p><strong>loop</strong> element defines loop (repetitive) block of excel rows. It should contain startRow and endRow attributes
                to specify start and end row of this repetitive block. <strong>items</strong> attribute names collection which should be populated with loop block data
                as it is known in our bean context map. <strong>var</strong> attribute specifies how to refer to each collection item during iteration in the inner sections.
                <strong>varType</strong> attribute defines full Java class name for collection item.</p>
                <source>
                    &lt;loop startRow="7" endRow="7" items="department.staff" var="employee" varType="net.sf.jxls.reader.sample.Employee">
                </source>
                <p><strong>loop</strong> element can contain any number of inner <strong>section</strong> and <strong>loop</strong> elements and have to contain
                <strong>loopbreakcondition</strong> definition. This describes break condition to stop loop iteration. In our sample it is as simple as specifying that
                next row after employees data must contain "Employee Payment Totals:" string in the first cell </p>
                <source>
                    &lt;loopbreakcondition>
                        &lt;rowcheck offset="0">
                            &lt;cellcheck offset="0">Employee Payment Totals:&lt;/cellcheck>
                        &lt;/rowcheck>
                    &lt;/loopbreakcondition>
                </source>
                <p>This is all you need to know to create XML mapping configuration file. Next is a simple sample of code which uses ReaderBuilder
                class to apply <a href="../xml/departments.xml">XML mapping file</a> to <a href="../xls/departmentdata.xls">departmentdata.xls</a>
                    to construct XLSReader class and read XLS data populating corresponding Java beans with XLS data</p>
                <source>
                    InputStream inputXML = new BufferedInputStream(getClass().getResourceAsStream(xmlConfig));
                    XLSReader mainReader = ReaderBuilder.buildFromXML( inputXML );
                    InputStream inputXLS = new BufferedInputStream(getClass().getResourceAsStream(dataXLS));
                    Department department = new Department();
                    Department hrDepartment = new Department();
                    List departments = new ArrayList();
                    Map beans = new HashMap();
                    beans.put("department", department);
                    beans.put("hrDepartment", hrDepartment);
                    beans.put("departments", departments);
                    mainReader.read( inputXLS, beans);
                </source>
            </section>

        </section>
    </body>
</document>
